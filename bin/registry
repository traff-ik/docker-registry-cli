#!/usr/bin/env php
<?php

declare(strict_types=1);

error_reporting(E_ALL);

use Amp\Loop;
use Amp\Http\Client\HttpClientBuilder;
use League\CLImate\CLImate;
use League\CLImate\Logger;
use Psr\Log\LogLevel;
use Traff\Registry;

require dirname(__DIR__) . DIRECTORY_SEPARATOR . 'vendor' . DIRECTORY_SEPARATOR . 'autoload.php';

$args = [
    'help' => [
        'noValue' => true,
        'longPrefix' => 'help',
        'description' => 'Show help message',
    ],
    'verbose' => [
        'noValue' => true,
        'prefix' => 'v',
        'longPrefix' => 'verbose',
        'description' => 'Verbose output',
    ],
    'registry' => [
        'prefix' => 'r',
        'longPrefix' => 'registry',
        'description' => 'Registry URL',
        'castTo' => 'string',
    ],
    'delete' => [
        'prefix' => 'd',
        'longPrefix' => 'delete',
        'noValue' => true,
        'description' => 'Delete the image'
    ],
    'image' => [
        'prefix' => 'i',
        'longPrefix' => 'image',
        'description' => 'Image IMAGE[:TAG]',
        'castTo' => 'string',
    ]
];

$climate = new CLImate();
$climate->description('Docker registry CLI');
$climate->arguments->add($args);

try {
    $climate->arguments->parse();
} catch (Exception $e) {
    $climate->error(sprintf('Invalid arguments: %s', $e->getMessage()));
    $climate->usage();
    exit(1);
}

if (count($argv) < 2 || $climate->arguments->defined('help')) {
    $climate->usage();
    exit(0);
}

if (! $climate->arguments->defined('registry')) {
    $climate->error('Registry URL must be provided. Use "-r" or "--registry" argument');
    exit(1);
}

$verbose = $climate->arguments->defined('verbose');
$registry_url = $climate->arguments->get('registry');
$level = $verbose ? LogLevel::DEBUG : LogLevel::INFO;

if (! $climate->arguments->get('registry')) {
    $climate->error('Registry URL must be provided');
    exit(1);
}

$climate->style->addCommand(LogLevel::DEBUG, 'light_magenta');
$cli_logger = new Logger($level, $climate);
$formatter = new Registry\Logger\LineFormatter("[%channel%][%level_name%] %message% %context%");
$handler = new Registry\Logger\ClImateHandler($cli_logger);
$handler->setFormatter($formatter);
$logger = new \Monolog\Logger('registry', [$handler]);

$http_client = new Registry\HttpClient((new HttpClientBuilder())->build());

$registry = new Registry\Registry(
    $registry_url,
    $http_client,
    $logger,
    new Registry\Factory\ImageFactory()
);

$logger->debug('Set registry URL as {url}', ['url' => $registry_url]);

Loop::defer(
    static function () use ($verbose, &$climate, &$registry): Generator {
        try {
            if ($climate->arguments->defined('delete')) {
                if (! $climate->arguments->defined('image')) {
                    $climate->to('error')->error('Image name must be provided. Use "-i" or "--image" argument');
                    exit(1);
                }

                $image_name = $climate->arguments->get('image');

                if (empty($image_name)) {
                    $climate->to('error')->error('Image name must be provided');
                    exit(1);
                }

                try {
                    $image = yield $registry->deleteTag($image_name);
                } catch (Error $e) {
                    $climate->to('error')->error($e->getMessage());
                    exit(1);
                }

                if (! $image->getTag()->getDigest()) {
                    $climate->to('error')->error('Can\'t get the image tag digest');
                    exit(1);
                }

                exit(0);
            }
        } catch (Throwable $e) {
            if ($verbose) {
                throw $e;
            }

            $climate->to('error')->error($e->getMessage());
        }
    }
);

Loop::run();
